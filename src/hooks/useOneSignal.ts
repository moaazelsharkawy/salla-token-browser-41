import { useState, useEffect } from 'react';

declare global {
  interface Window {
    OneSignalDeferred?: Array<(OneSignal: any) => void>;
    OneSignal?: any;
  }
}

const APP_ID = "0b54fe9f-d9d9-49b2-903a-43da608b5d5c";
const COOKIE_NAME = "onesignal_consent";

export const useOneSignal = () => {
  const [isInitialized, setIsInitialized] = useState(false);
  const [hasConsent, setHasConsent] = useState(false);
  const [showPrompt, setShowPrompt] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  console.log('üîÑ useOneSignal hook loaded');

  // ŸÇÿ±ÿßÿ°ÿ© ÿ≠ÿßŸÑÿ© ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ŸÖŸÜ ÿßŸÑŸÉŸàŸÉŸäÿ≤
  const getConsentFromCookie = (): boolean => {
    try {
      const cookies = document.cookie.split(';');
      const consentCookie = cookies.find(cookie => 
        cookie.trim().startsWith(`${COOKIE_NAME}=`)
      );
      const hasConsent = consentCookie?.split('=')[1] === 'true';
      console.log('üç™ Consent from cookie:', hasConsent);
      return hasConsent;
    } catch (error) {
      console.error('‚ùå Error reading cookie:', error);
      return false;
    }
  };

  // ÿ≠ŸÅÿ∏ ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ŸÅŸä ÿßŸÑŸÉŸàŸÉŸäÿ≤
  const saveConsentToCookie = (consent: boolean) => {
    try {
      // ÿ≠ŸÅÿ∏ ŸÅŸä ÿßŸÑÿ¨ŸÑÿ≥ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ© ŸÅŸÇÿ∑
      document.cookie = `${COOKIE_NAME}=${consent}; path=/; SameSite=Lax`;
      console.log('üíæ Consent saved to cookie:', consent);
      setHasConsent(consent);
    } catch (error) {
      console.error('‚ùå Error saving cookie:', error);
    }
  };

  // ÿ™ŸáŸäÿ¶ÿ© OneSignal
  useEffect(() => {
    console.log('üöÄ Initializing OneSignal...');
    
    const consent = getConsentFromCookie();
    setHasConsent(consent);

    // ÿ•ÿ∏Ÿáÿßÿ± ŸÜÿßŸÅÿ∞ÿ© ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÇÿØ ÿßÿ™ÿÆÿ∞ ŸÇÿ±ÿßÿ± ÿ®ÿπÿØ
    const hasDecided = document.cookie.includes(COOKIE_NAME);
    if (!hasDecided) {
      console.log('üì¢ Showing notification prompt (no previous decision)');
      setShowPrompt(true);
    } else {
      console.log('‚úì User already made a decision:', consent ? 'accepted' : 'declined');
    }

    // ÿ™ŸáŸäÿ¶ÿ© OneSignal SDK
    if (typeof window !== 'undefined') {
      window.OneSignalDeferred = window.OneSignalDeferred || [];
      window.OneSignalDeferred.push(async function(OneSignal: any) {
        try {
          console.log('üîß Configuring OneSignal...');
          await OneSignal.init({
            appId: APP_ID,
            allowLocalhostAsSecureOrigin: true,
          });
          setIsInitialized(true);
          console.log('‚úÖ OneSignal initialized successfully');
          console.log('üì± OneSignal object:', OneSignal);
        } catch (error) {
          console.error('‚ùå OneSignal initialization error:', error);
        }
      });
    }
  }, []);

  // ÿ∑ŸÑÿ® ÿ•ÿ∞ŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
  const requestPermission = async () => {
    setIsLoading(true);
    console.log('üîî Requesting notification permission...');
    
    try {
      if (!window.OneSignal) {
        console.error('‚ùå OneSignal not loaded yet');
        setIsLoading(false);
        return false;
      }

      console.log('üìû Calling OneSignal.Notifications.requestPermission()');
      const permission = await window.OneSignal.Notifications.requestPermission();
      console.log('‚úÖ Permission result:', permission);
      
      if (permission) {
        saveConsentToCookie(true);
        setShowPrompt(false);
        
        // ÿ¨ŸÑÿ® ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
        try {
          const userId = await window.OneSignal.User.PushSubscription.id;
          console.log('üë§ OneSignal User ID:', userId);
        } catch (error) {
          console.log('‚ö†Ô∏è Could not get user ID:', error);
        }
        
        setIsLoading(false);
        return true;
      } else {
        console.log('‚ö†Ô∏è Permission denied');
        saveConsentToCookie(false);
        setShowPrompt(false);
        setIsLoading(false);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error requesting permission:', error);
      setIsLoading(false);
      return false;
    }
  };

  // ÿ±ŸÅÿ∂ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
  const dismissPrompt = () => {
    console.log('‚ùå User dismissed notification prompt');
    saveConsentToCookie(false);
    setShowPrompt(false);
  };

  // ÿ•ÿ±ÿ≥ÿßŸÑ tag ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
  const setUserTag = async (key: string, value: string) => {
    try {
      if (window.OneSignal && hasConsent) {
        await window.OneSignal.User.addTag(key, value);
        console.log(`‚úÖ Tag set: ${key} = ${value}`);
        return true;
      } else {
        console.log('‚ö†Ô∏è Cannot set tag - no consent or OneSignal not ready');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error setting tag:', error);
      return false;
    }
  };

  return {
    isInitialized,
    hasConsent,
    showPrompt,
    isLoading,
    requestPermission,
    dismissPrompt,
    setUserTag
  };
};
